/*
 * This file is generated by jOOQ.
*/
package com.jooq.data.tables;


import com.jooq.data.Keys;
import com.jooq.data.Public;
import com.jooq.data.tables.records.LocationsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Locations extends TableImpl<LocationsRecord> {

    private static final long serialVersionUID = -1153050949;

    /**
     * The reference instance of <code>public.locations</code>
     */
    public static final Locations LOCATIONS = new Locations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LocationsRecord> getRecordType() {
        return LocationsRecord.class;
    }

    /**
     * The column <code>public.locations.id</code>.
     */
    public final TableField<LocationsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('locations_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.locations.location</code>.
     */
    public final TableField<LocationsRecord, String> LOCATION = createField("location", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.locations.ulist</code>.
     */
    public final TableField<LocationsRecord, Long[]> ULIST = createField("ulist", org.jooq.impl.SQLDataType.BIGINT.getArrayDataType(), this, "");

    /**
     * Create a <code>public.locations</code> table reference
     */
    public Locations() {
        this("locations", null);
    }

    /**
     * Create an aliased <code>public.locations</code> table reference
     */
    public Locations(String alias) {
        this(alias, LOCATIONS);
    }

    private Locations(String alias, Table<LocationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Locations(String alias, Table<LocationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LocationsRecord, Long> getIdentity() {
        return Keys.IDENTITY_LOCATIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LocationsRecord> getPrimaryKey() {
        return Keys.LOCATIONS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LocationsRecord>> getKeys() {
        return Arrays.<UniqueKey<LocationsRecord>>asList(Keys.LOCATIONS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Locations as(String alias) {
        return new Locations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Locations rename(String name) {
        return new Locations(name, null);
    }
}
